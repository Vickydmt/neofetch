print_info() {
    # Count running terminals
    term_count=$(pgrep -c kitty)  # Adjust for your terminal (kitty, alacritty, etc.)

    if [[ "$term_count" -le 3 ]]; then
    
         info "  " title
        prin "${cl9}┌──────────────────────────────────────┐"
      info "\n \n " distro
    info "\n \n " cpu
    info "\n \n " memory
    info "\n \n " kernel
    info "\n \n " uptime
    info "\n \n " shell
#    info "\n \n " resolution
    info "\n \n " de
    info "\n \n " wm
    info "\n \n 嗀"wm_theme
    info "\n \n 嗀"theme
    info "\n \n " icons
    info "\n \n " term
    info "\n \n " term_font
    info "\n \n "" gpu
    info "\n \n " memory
    info "GPU Driver" gpu_driver  # Linux/macOS only
    # info "CPU Usage" cpu_usage
    info "\n \n " disk
    # info "\n \n " battery
     info "\n \n " font
    info "\n \n " song
    [[ "$player" ]] && prin "\n \n " "$player"
    info "\n \n "" local_ip
    # info "\n \n  Public IP" public_ip 
        prin "${cl9}└───────────────────── ${cl0} ${cl1} ${cl2} ${cl3} ${cl4} ${cl5} ${cl6} $(color 15) ${cl9}┘"
        prin "\n"
    else
        echo ""
    fi
}


reset="\033[0m"
gray="\033[1;90m"
red="\033[1;31m"
green="\033[1;32m"
yellow="\033[1;33m"
blue="\033[1;34m"
magenta="\033[1;35m"
cyan="\033[1;36m"
white="\033[1;37m"

cl0="${gray}"
cl1="${red}"
cl2="${green}"
cl3="${yellow}"
cl4="${blue}"
cl5="${magenta}"
cl6="${cyan}"
cl7="${white}"
cl9="${reset}"

# Title


# Hide/Show Fully qualified domain name.
#
# Default:  'off'
# Values:   'on', 'off'
# Flag:     --title_fqdn
title_fqdn="off"


# Kernel


# Shorten the output of the kernel function.
#
# Default:  'on'
# Values:   'on', 'off'
# Flag:     --kernel_shorthand
# Supports: Everything except *BSDs (except PacBSD and PC-BSD)
#
# Example:
# on:  '4.8.9-1-ARCH'
# off: 'Linux 4.8.9-1-ARCH'
kernel_shorthand="on"



# Image backend.
#
# Default:  'ascii'
# Values:   'ascii', 'caca', 'chafa', 'jp2a', 'iterm2', 'off',
#           'termpix', 'pixterm', 'tycat', 'w3m', 'kitty'
# Flag:     --backend
image_backend="kitty"

# Image Source
#
# Which image or ascii file to display.
#
# Default:  'auto'
# Values:   'auto', 'ascii', 'wallpaper', '/path/to/img', '/path/to/ascii', '/path/to/dir/'
#           'command output (neofetch --ascii "$(fortune | cowsay -W 30)")'
# Flag:     --source
#
# NOTE: 'auto' will pick the best image source for whatever image backend is used.
#       In ascii mode, distro ascii art will be used and in an image mode, your
#       wallpaper will be used.
# Set image directory
image_dir="$HOME/.config/neofetch/images"
image_cache="$HOME/.config/neofetch/last_images.txt"

# Get all images
files=($(find "$image_dir" -type f -iname "*.jpg" -o -iname "*.png" -o -iname "*.jpeg" -o -iname "*.gif" -o -iname "*.bmp"))

# Ensure there are images to display
if [ ${#files[@]} -eq 0 ]; then
    echo "No images found in $image_dir"
    exit 1
fi

# Read the last five used images into an array
if [[ -f "$image_cache" ]]; then
    mapfile -t last_images < "$image_cache"
else
    last_images=()
fi

# Select a new image that has not been used in the last five terminals
new_file=""
while [[ -z "$new_file" || " ${last_images[*]} " =~ " $new_file " ]]; do
    new_file=$(printf "%s\n" "${files[@]}" | shuf -n 1)
done

# Update the last images queue (keep only the last five)
last_images+=("$new_file")
if [ ${#last_images[@]} -gt 5 ]; then
    last_images=("${last_images[@]:1}")  # Remove the oldest entry
fi

# Save updated list
printf "%s\n" "${last_images[@]}" > "$image_cache"

# **Delay for accurate terminal count**
sleep 0.090  # Adjust if needed

# Count the number of running Kitty terminals again after delay
term_count=$(pgrep -c kitty)

# **Force the first terminal to 20% size, others adjust dynamically**
if [ "$term_count" -eq 1 ]; then
    image_size="20%"
else
    # Get terminal width for dynamic resizing
    term_width=$(tput cols)
    
    if [ "$term_width" -lt 80 ]; then
        image_size="30%"  # Small terminals
    elif [ "$term_width" -lt 120 ]; then
        image_size="40%"
    else
        image_size="50%"  # Large terminals
    fi
fi

# Apply settings
image_source="$new_file"







# Image Options
# Image loop
# Setting this to on will make neofetch redraw the image constantly until
# Ctrl+C is pressed. This fixes display issues in some terminal emulators.
#
# Default:  'off'
# Values:   'on', 'off'
# Flag:     --loop
image_loop="off"

# Thumbnail directory
#
# Default: '~/.cache/thumbnails/neofetch'
# Values:  'dir'
thumbnail_dir="${XDG_CACHE_HOME:-${HOME}/.cache}/thumbnails/neofetch"

# Crop mode
#
# Default:  'normal'
# Values:   'normal', 'fit', 'fill'
# Flag:     --crop_mode
#
# See this wiki page to learn about the fit and fill options.
# https://github.com/dylanaraps/neofetch/wiki/What-is-Waifu-Crop%3F
crop_mode="normal"

# Crop offset
# Note: Only affects 'normal' crop mode.
#
# Default:  'center'
# Values:   'northwest', 'north', 'northeast', 'west', 'center'
#           'east', 'southwest', 'south', 'southeast'
# Flag:     --crop_offset
crop_offset="northwest"
image_backend="kitty"
crop_mode="none"  # Prevents Neofetch from cropping



